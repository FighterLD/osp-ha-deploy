#################################
# Scenario Requirements Section #
#################################
= VARIABLES =

# Expands to $PHD_VAR_network_domain, $PHD_VAR_network_internal, etc
network:
  domain: lab.bos.redhat.com
  internal: 192.168.124

rpm:
  osp: 6.0
  download: download.devel.redhat.com

# I set the password to 'cluster', USE A SAFER ONE
env:
  password: cluster

#################################
# Scenario Requirements Section #
#################################
= REQUIREMENTS =
# rhos6-lb1 rhos6-lb2 rhos6-lb3
nodes: 3

######################
# Deployment Scripts #
######################
= SCRIPTS =

target=all
....

# install the packages
yum install -y pcs pacemaker corosync fence-agents-all resource-agents

# enable pcsd
systemctl enable pcsd
systemctl start pcsd

systemctl disable firewalld
systemctl stop firewalld

# set a password for hacluster user. password should be the same on all nodes
echo ${PHD_VAR_env_password} | passwd --stdin hacluster
....

target=$PHD_ENV_nodes1
....
short_nodes=$(echo $PHD_ENV_nodes | sed s/.vmnet.${PHD_VAR_network_domain}//g)
# autheticate nodes, requires all nodes to have pcsd up and running 
# the -p option is used to give the password on command line and make it easier to script
pcs cluster auth $short_nodes -u hacluster -p ${PHD_VAR_env_password} --force

# Construct the cluster
pcs cluster setup --force --name rhos6-mongodb ${short_nodes}
pcs cluster enable --all
pcs cluster start --all
....

target=all
....
# You may need to reboot after installing nfs-utils
yum install -y mongodb mongodb-server

# set binding IP address and replica set
sed -i -e 's#bind_ip.*#bind_ip = 0.0.0.0#g'  /etc/mongodb.conf
echo "replSet = ceilometer" >> /etc/mongodb.conf 

# required to bootstrap mongodb
systemctl start mongod
systemctl stop mongod
....


target=$PHD_ENV_nodes1
....
sleep 30

pcs stonith create fence1 fence_xvm multicast_address=225.0.0.2
pcs stonith create fence2 fence_xvm multicast_address=225.0.0.3
pcs stonith create fence3 fence_xvm multicast_address=225.0.0.4

pcs resource create mongodb systemd:mongod --clone

# Start can take a while
pcs resource op add mongodb start timeout=120s

# Setup replica (need to wait for mongodb to settle down first!)
sleep 20

# Careful with the node names here, must match FQDN
rm -f /root/mongo_replica_setup.js
cat > /root/mongo_replica_setup.js << EOF
rs.initiate()
sleep(10000)
EOF

for node in $PHD_ENV_nodes; do
cat >> /root/mongo_replica_setup.js << EOF
    rs.add("$node");
EOF
done

mongo /root/mongo_replica_setup.js
rm -f /root/mongo_replica_setup.js
....
