# This file can be used directly by 'phd', see 'build-all.sh' in this
# directory for how it can be invoked.  The only requirement is a list
# of nodes you'd like it to modify.
#
# The scope of each command-block is controlled by the preceeding
# 'target' line. 
#
# - target=all
#   The commands are executed on evey node provided
#
# - target=local
#   The commands are executed from the node hosting phd. When not
#   using phd, they should be run from some other independant host
#   (such as the puppet master)
#
# - target=$PHD_ENV_nodes{N}
#   The commands are executed on the Nth node provided.
#   For example, to run on only the first node would be target=$PHD_ENV_nodes1
#
# Tasks to be performed at this step include:

#################################
# Scenario Requirements Section #
#################################

# Create 3 single-node clusters
= VARIABLES =

# Expands to $PHD_VAR_network_domain, $PHD_VAR_network_internal, etc
network:
  domain: lab.bos.redhat.com
  internal: 192.168.124

rpm:
  osp: 6.0
  download: download.devel.redhat.com

# I set the password to 'cluster', USE A SAFER ONE
env:
  password: cluster

#################################
# Scenario Requirements Section #
#################################
= REQUIREMENTS =
nodes: 3

######################
# Deployment Scripts #
######################
= SCRIPTS =

target=all
....

# install the packages
yum install -y pcs pacemaker corosync fence-agents-all resource-agents

# enable pcsd
systemctl enable pcsd
systemctl start pcsd

systemctl disable firewalld
systemctl stop firewalld

# set a password for hacluster user. password should be the same on all nodes
echo ${PHD_VAR_env_password} | passwd --stdin hacluster
....

target=all
....
short_nodes=$(hostname -s) 
# autheticate nodes, requires all nodes to have pcsd up and running 
# the -p option is used to give the password on command line and make it easier to script
pcs cluster auth $short_nodes -u hacluster -p ${PHD_VAR_env_password} --force

# Construct the cluster
pcs cluster setup --force --name rhos6-swift-aoc ${short_nodes}
pcs cluster enable --all
pcs cluster start --all
....

target=all
....
yum install -y openstack-swift-object openstack-swift-container openstack-swift-account openstack-utils rsync xfsprogs
....

target=all
....
# If you have a dedicated device, format it here and have the cluster mount it as per 'swift-fs' below
# We don't, but swift wants a different partition than /, so we'll create a loopback file and mount that for 'swift-fs'

mkdir -p /local/swiftstorage/target
truncate --size=1G /local/swift.img
losetup /dev/loop0 /local/swift.img
mkfs.xfs /dev/loop0
mount /dev/loop0 /local/swiftstorage
chown -R swift:swift /local
umount /dev/loop0

# Some extra magic to set up the loopback device after a reboot
echo "losetup /dev/loop0 /local/swift.img" >> /etc/rc.d/rc.local 
chmod a+x /etc/rc.d/rc.local 

openstack-config --set /etc/swift/object-server.conf DEFAULT bind_ip 0.0.0.0
openstack-config --set /etc/swift/object-server.conf DEFAULT devices /local/swiftstorage
openstack-config --set /etc/swift/object-server.conf DEFAULT mount_check false
openstack-config --set /etc/swift/account-server.conf DEFAULT bind_ip 0.0.0.0
openstack-config --set /etc/swift/account-server.conf DEFAULT devices /local/swiftstorage
openstack-config --set /etc/swift/account-server.conf DEFAULT mount_check false
openstack-config --set /etc/swift/container-server.conf DEFAULT bind_ip 0.0.0.0
openstack-config --set /etc/swift/container-server.conf DEFAULT devices /local/swiftstorage
openstack-config --set /etc/swift/container-server.conf DEFAULT mount_check false

openstack-config --set /etc/swift/object-server.conf DEFAULT mount_check false
openstack-config --set /etc/swift/account-server.conf DEFAULT mount_check false
openstack-config --set /etc/swift/container-server.conf DEFAULT mount_check false

mkdir -p /tmp/keystone-signing-swift

chown -R root:swift /etc/swift
chown -R swift:swift /tmp/keystone-signing-swift
....

target=all
....
# local hack to determin where vm is running
bricknum=$(echo $(hostname -s) | sed -e 's#.*brick##g')
pcs stonith create fence fence_xvm multicast_address=225.0.0.$((1 + $bricknum))

pcs resource create swift-fs Filesystem device="/dev/loop0" directory="/local/swiftstorage/target" fstype="xfs"
sleep 5
pcs resource create swift-account systemd:openstack-swift-account
pcs resource create swift-container systemd:openstack-swift-container
pcs resource create swift-object systemd:openstack-swift-object
pcs constraint order start swift-fs then swift-account
pcs constraint order start swift-account then swift-container
pcs constraint order start swift-container then swift-object
....
