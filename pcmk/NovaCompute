#!/bin/sh
#
#
# NovaCompute agent manages compute daemons.
#
# Copyright (c) 2015
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}
. ${OCF_FUNCTIONS}
: ${__OCF_ACTION=$1}

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="NovaCompute" version="1.0">
<version>1.0</version>

<longdesc lang="en">
OpenStack Nova Compute Server.
Extracts authorization settings from nova.conf where possible.
</longdesc>
<shortdesc lang="en">OpenStack Nova Compute Server</shortdesc>

<parameters>

<parameter name="auth_url" unique="0">
<longdesc lang="en">
Authorization URL for connecting to neutron in admin context
</longdesc>
<shortdesc lang="en">Authorization URL</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="user_name" unique="0">
<longdesc lang="en">
Username for connecting to neutron in admin context
</longdesc>
<shortdesc lang="en">Username</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="password" unique="0">
<longdesc lang="en">
Password for connecting to neutron in admin context
</longdesc>
<shortdesc lang="en">Password</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="tenant_name" unique="0">
<longdesc lang="en">
Tenant name for connecting to neutron in admin context.
Note that with Keystone V3 tenant names are only unique within a domain.
</longdesc>
<shortdesc lang="en">Tenant name</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="extra" unique="0">
<longdesc lang="en">
Additional options to pass on the nova command line
</longdesc>
<shortdesc lang="en">Additional options</shortdesc>
<content type="string" default="" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="20" />
<action name="stop"         timeout="20" />
<action name="monitor"      timeout="20" interval="10" depth="0"/>
<action name="validate-all" timeout="20" />
<action name="meta-data"    timeout="5" />
</actions>
</resource-agent>
END
}

#######################################################################

# don't exit on TERM, to test that lrmd makes sure that we do exit
trap sigterm_handler TERM
sigterm_handler() {
	ocf_log info "They use TERM to bring us down. No such luck."
	return
}

nova_usage() {
	cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

nova_pid() {
    ps axf | grep python.*nova-compute | grep -v grep | awk '{print $1}'
}

pending_migrations() {
    # For valid states: grep -r migration.status.*= /usr/lib/python2.7
    # - confirming
    # - confirmed
    # - reverting
    # - reverted    
    # - pre-migrating
    # - migrating
    # - post-migrating
    # - finished
    # - error

    # API defines pending ops as:
    #/usr/lib/python2.7/site-packages/nova/db/sqlalchemy/api.py:            filter(~models.Migration.status.in_(['confirmed', 'reverted', 'error']))
    
    # Output:
    #+-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+--------------+--------+--------------------------------------+------------+------------+----------------------------+----------------------------+
    #| Source Node                       | Dest Node                         | Source Compute                    | Dest Compute                      | Dest Host    | Status | Instance UUID                        | Old Flavor | New Flavor | Created At                 | Updated At                 |
    #+-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+--------------+--------+--------------------------------------+------------+------------+----------------------------+----------------------------+
    #| mrg-03.mpc.lab.eng.bos.redhat.com | mrg-04.mpc.lab.eng.bos.redhat.com | mrg-03.mpc.lab.eng.bos.redhat.com | mrg-04.mpc.lab.eng.bos.redhat.com | 10.16.144.40 | error  | 0ee0cbd2-90e0-4910-8f6d-ac35920abb92 | 5          | 5          | 2015-03-13T02:08:15.000000 | 2015-03-13T02:08:17.000000 |

    nova ${nova_options} migration-list --host ${NOVA_HOST} | awk -F\| '
$7~/ing/ { incomplete = 1 }
{ 
  if(incomplete) {
    print $8
  }
}'
}

nova_start() {
    nova_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    fi

    while [ 1 = 1 ]; do
	pending=`pending_migrations | wc -l`
	if [ ${pending} = 0 ]; then
	    break
	fi
	ocf_exit_reason "Waiting on ${pending} migrations"
	sleep 2
    done

    export LIBGUESTFS_ATTACH_METHOD=appliance
    su nova -s /bin/sh -c /usr/bin/nova-compute &
    nova ${nova_options} service-enable ${NOVA_HOST} nova-compute

    rc=$OCF_NOT_RUNNING
    ocf_exit_reason "Waiting for nova to start"
    while [ $rc != $OCF_SUCCESS ]; do
	nova_monitor
	rc=$?
    done
    return $rc
}

nova_stop() {
    pid=`nova_pid`

    nova_monitor
    if [ $? = $OCF_SUCCESS ]; then
	if [ 0 = 1 ]; then
	    # Apparently this is a bad idea...
	    #
	    # Migrate as many as we can
	    # Don't bother checking the exit code, its always 0
	    #
	    # +--------------------------------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
	    # | Server UUID                          | Migration Accepted | Error Message                                                                                                                                                   |
	    # +--------------------------------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
	    # | 0ee0cbd2-90e0-4910-8f6d-ac35920abb92 | True               |                                                                                                                                                                 |
	    # | be2fa0b5-17bb-4f28-a55f-3339bb57ead1 | False              | Error while migrating instance: No valid host was found. No valid host found for cold migrate (HTTP 400) (Request-ID: req-dc51e285-dd99-4120-aab3-f3bf0335a1e3) |
	    # ...
	    nova ${nova_options} host-servers-migrate ${NOVA_HOST}
	    nova ${nova_options} live-migration

	    while [ 1 = 1 ]; do
		pending=`pending_migrations | wc -l`
		if [ ${pending} = 0 ]; then
		    break
		fi
		ocf_exit_reason "Waiting on ${pending} migrations"
		sleep 2
	    done

	    # What to do if some cannot be migrated?
	    # nova delete?
	fi

	# Then stop
	su nova -c "kill -TERM $pid" -s /bin/bash
	
	nova_monitor
	rc=$
	while [ $rc = $OCF_SUCCESS ]; do
	    nova_monitor
	    rc=$?
	done

	if [ $rc != $OCF_NOT_RUNNING ]; then
	    return $OCF_ERR_GENERIC
	fi
    fi

    rm -f ${statefile}
    return $OCF_SUCCESS
}

nova_monitor() {
    # Consider utilizing:
    #    nova service-list --host $(hostname)

    pid=`nova_pid`

    if [ "x$pid" != x ]; then
	touch $statefile

	state=$(nova ${nova_options} service-list --host ${NOVA_HOST} --binary nova-compute | grep ${NOVA_HOST} | awk -F\| '{print $7}' | tr -d ' ')
	if [ -z "$state" ]; then
	    ocf_exit_reason "nova service-list command failed"
	    return $OCF_ERR_GENERIC
	elif [ $state = "up" ]; then
	    return $OCF_SUCCESS
	else
	    return $OCF_ERR_GENERIC
	fi

    elif [ -e ${statefile} ]; then
	return $OCF_ERR_GENERIC
    fi

    return $OCF_NOT_RUNNING
}

nova_validate() {
    rc=$OCF_SUCCESS

#    if [ "x$OS_USERNAME" = x ]; then
#        ocf_exit_reason "Nova username not configured in nova.conf"
#	rc=$OCF_ERR_INSTALLED
#    fi

    return $rc
}

statefile="${HA_RSCTMP}/nova-compute"
nova_options=""

if [ -z "${OCF_RESKEY_auth_url}" ]; then
    OCF_RESKEY_auth_url=$(openstack-config --get /etc/nova/nova.conf DEFAULT neutron_admin_auth_url)
fi
if [ ! -z "${OCF_RESKEY_auth_url}" ]; then
    nova_options="${nova_options} --os-auth-url ${OCF_RESKEY_auth_url}"
fi

if [ -z "${OCF_RESKEY_user_name}" ]; then
    OCF_RESKEY_user_name=$(openstack-config --get /etc/nova/nova.conf DEFAULT neutron_admin_username)
fi
if [ ! -z "${OCF_RESKEY_user_name}" ]; then
    nova_options="${nova_options} --os-username ${OCF_RESKEY_user_name}"
fi

if [ -z "${OCF_RESKEY_password}" ]; then
    OCF_RESKEY_password=$(openstack-config --get /etc/nova/nova.conf DEFAULT neutron_admin_password)
fi
if [ ! -z "${OCF_RESKEY_password}" ]; then
    nova_options="${nova_options} --os-password ${OCF_RESKEY_password}"
fi

if [ -z "${OCF_RESKEY_tenant_name}" ]; then
    OCF_RESKEY_tenant_name=$(openstack-config --get /etc/nova/nova.conf DEFAULT neutron_admin_tenant_name)
fi
if [ ! -z "${OCF_RESKEY_tenant_name}" ]; then
    nova_options="${nova_options} --os-tenant-name ${OCF_RESKEY_tenant_name}"
fi

if [ ! -z "${OCF_RESKEY_extra}" ]; then
    nova_options="${nova_options} ${OCF_RESKEY_extra}"
fi

NOVA_HOST=$(openstack-config --get /etc/nova/nova.conf DEFAULT host 2>/dev/null)
if [ $? = 1 ]; then
    NOVA_HOST=$(hostname)
fi

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		nova_validate; nova_start;;
stop)		nova_stop;;
monitor)	nova_monitor;;
validate-all)	nova_validate;;
usage|help)	nova_usage
		exit $OCF_SUCCESS
		;;
*)		nova_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc

