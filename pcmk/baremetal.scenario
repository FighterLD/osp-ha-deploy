# This file can be used directly by 'phd', see 'build-all.sh' in this
# directory for how it can be invoked.  The only requirement is a list
# of nodes you'd like it to modify.
#
# The scope of each command-block is controlled by the preceeding
# 'target' line. 
#
# - target=all
#   The commands are executed on evey node provided
#
# - target=local
#   The commands are executed from the node hosting phd. When not
#   using phd, they should be run from some other independant host
#   (such as the puppet master)
#
# - target=$PHD_ENV_nodes{N}
#   The commands are executed on the Nth node provided.
#   For example, to run on only the first node would be target=$PHD_ENV_nodes1
#
# We start with 3 (or more, up to 16) nodes running a minimal CentOS 6
#
# Tasks to be performed include:
# - setting up the required repositories from which to download Openstack and the HA-Addon
# - disabling firewalls and SElinux. This is a necessary evil until the proper policies can be written.
# - creating network bridges for use by VMs hosting OpenStack services
# - normalizing network interface names
# - fixing multicast
# - removing /home and making the root partition as large as possible to maximumize the amount of space available to openstack

#################################
# Scenario Requirements Section #
#################################
= VARIABLES =

PHD_VAR_network_domain
PHD_VAR_network_internal
PHD_VAR_network_nic_external
PHD_VAR_network_nic_internal
PHD_VAR_network_named_forwarders
PHD_VAR_rpm_download

#################################
# Scenario Requirements Section #
#################################
= REQUIREMENTS =
nodes: 9

######################
# Deployment Scripts #
######################
= SCRIPTS =

target=all
....

distro=$(cat /etc/redhat-release | sed s/.*release\ // | awk '{print $1}')
distro_major=$(cat /etc/redhat-release | sed s/.*release\ // | awk -F. '{print $1}')
echo "Installing repos for $distro"

cat > /etc/yum.repos.d/redhat-${distro}.repo << EOF
[redhat-${distro}]
name=redhat-${distro}
baseurl=http://${PHD_VAR_rpm_download}/${PHD_VAR_rpm_base}
gpgcheck=0
enabled=1
[redhat-ha]
name=redhat-${distro}-ha
baseurl=http://${PHD_VAR_rpm_download}/${PHD_VAR_rpm_cluster}
gpgcheck=0
enabled=1
[redhat-z]
name=redhat-${distro}-z
baseurl=http://${PHD_VAR_rpm_download}/${PHD_VAR_rpm_updates}
gpgcheck=0
enabled=1
EOF

case $distro_major in
	# Account for the location differences between RHEL/CentOS 6 and 7
    6)
	sed -i s#addons/HighAvailability#HighAvailability#g /etc/yum.repos.d/redhat-${distro}.repo
	sed -i s#RHEL-${distro}-z#rhel-${distro}-Z#g /etc/yum.repos.d/redhat-${distro}.repo
	;;
    7)
	sed -i s#HighAvailability#addons/HighAvailability#g /etc/yum.repos.d/redhat-${distro}.repo
	sed -i s#RHEL-${distro}-Z#rhel-${distro}-z#g /etc/yum.repos.d/redhat-${distro}.repo

	# ethX will do nicely thankyou
	rm -f /lib/udev/rules.d/75-persistent-net-generator.rules
	rm -f /etc/udev/rules.d/70-persistent-net.rules
	;;
esac

yum clean all
yum update -y
yum install -y pacemaker fence-agents resource-agents pcs cman ccs libvirt qemu-kvm bind-utils
sed -i -e 's/=enforcing/=disabled/g' /etc/sysconfig/selinux
sed -i -e 's/=enforcing/=disabled/g' /etc/selinux/config

[ -f /etc/cron.d/rhn-virtualization.cron ] && sed -i -e 's/^0/#0/g' /etc/cron.d/rhn-virtualization.cron

case $distro_major in
    6)
	chkconfig acpid off
	chkconfig iptables off
	chkconfig ip6tables off
	;;
    7)
	chkconfig firewalld off
	;;
esac
chkconfig libvirtd on
service libvirtd start
....

target=all
....
lastoct="$(hostname -s | sed -e 's#^[a-z]*-##g' -e 's#^0*##g')"

virsh net-destroy default
virsh net-undefine default

cat > /etc/sysconfig/network-scripts/ifcfg-ext0 << EOF
DEVICE=ext0
NAME=ext0
TYPE=Bridge
BOOTPROTO=dhcp
ONBOOT=yes
IPV6INIT=yes
IPV6_AUTOCONF=yes
EOF

cat > /etc/sysconfig/network-scripts/ifcfg-vmnet0 << EOF
DEVICE=vmnet0
NAME=vmnet0
TYPE=Bridge
BOOTPROTO=static
ONBOOT=yes
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPADDR=${PHD_VAR_network_internal}.$lastoct
NETMASK=255.255.255.0
NETWORK=${PHD_VAR_network_internal}.0
EOF


for device in `ls -1 /sys/class/net`; do
    case ${PHD_VAR_network_nic_external} in
    	 *${device}*) 
	 cat > /etc/sysconfig/network-scripts/ifcfg-${device} << EOF
DEVICE=${device}
BOOTPROTO=none
ONBOOT=yes
BRIDGE=ext0
NAME=${device}
EOF
	;;
    esac
    case ${PHD_VAR_network_nic_internal} in
    	 *${device}*) 
	 cat > /etc/sysconfig/network-scripts/ifcfg-${device} << EOF
DEVICE=${device}
BOOTPROTO=none
ONBOOT=yes
BRIDGE=vmnet0
NAME=${device}
EOF
	;;
    esac
done

if grep -q ip_forward /etc/sysctl.conf; then
    sed -i -e 's#ip_forward.*#ip_forward = 1#g' /etc/sysctl.conf
else
   echo "ip_forward = 1" >> /etc/sysctl.conf
fi

echo "echo 1 > /sys/class/net/ext0/bridge/multicast_querier" >> /etc/rc.d/rc.local
echo "echo 1 > /sys/class/net/vmnet0/bridge/multicast_querier" >> /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local
....

# Optional if /home is huge and /root is tiny

target=all
....
umount /home
sed -i -e 's#.*home.*##g' /etc/fstab 
lvremove -f /dev/mapper/*home
lvresize -f -l+100%FREE /dev/mapper/*root
resize2fs /dev/mapper/*root || xfs_growfs /dev/mapper/*-root
....

target=all
....
ext_ip=$(host $PHD_ENV_nodes1 | awk '{print $4}')

# Turn off auto-generation of resolv.conf so we can override it 
echo PEERDNS=no >> /etc/sysconfig/network-scripts/ifcfg-ext0
echo search vmnet.${PHD_VAR_network_domain} ${PHD_VAR_network_domain} > /etc/resolv.conf
echo nameserver ${ext_ip} >> /etc/resolv.conf
....

# Implied by the reboot below
#target=all
#....
#service network restart
#/etc/rc.local
#....

target=local
....
# Reboot each node and wait for it to return
for node in $(echo $PHD_ENV_nodes); do
    phd_cmd_exec "reboot > /dev/null 2>&1" "$node"
    phd_wait_connection 300 $node
    phd_cmd_exec "uptime" "$node"
done
....
